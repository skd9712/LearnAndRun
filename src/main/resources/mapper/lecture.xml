<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.chunjae.learnandrun.dao.LectureMapper">
    <select id="getCount" parameterType="hashmap" resultType="int">
        select count(*)
        from lecture
        <where>
            <if test="search_txt!=null and search_txt!='' and !''.equals(search_txt)">
                <choose>
                    <when test="search=='all'">
                        and lectureName like concat('%', #{search_txt},'%')
                        or teacher like concat('%', #{search_txt},'%')
                        or subjectName like concat('%', #{search_txt},'%')
                    </when>
                    <when test="search=='lectureName'">
                        and lectureName like concat('%', #{search_txt},'%')
                    </when>
                    <when test="search=='teacher'">
                        and teacher like concat('%', #{search_txt},'%')
                    </when>
                    <when test="search=='subjectName'">
                        and subjectName like concat('%', #{search_txt},'%')
                    </when>
                </choose>
            </if>
        </where>
    </select>

    <select id="listLecture" parameterType="hashmap" resultType="com.chunjae.learnandrun.dto.LectureDTO">
        select l.lectureNo
             , lectureName
             , teacher
             , subjectName
             , description
             , price
             , startDate
             , thumbnail
             , lectureData
             , target
             , count(o.lectureNo) as 'popular'
        from lecture l left join orders o
            on l.lectureNo=o.lectureNo
        <where>
            <if test="search_txt!=null and search_txt!='' and !''.equals(search_txt)">
                <choose>
                    <when test="search=='all'">
                        and lectureName like concat('%', #{search_txt},'%')
                        or teacher like concat('%', #{search_txt},'%')
                        or subjectName like concat('%', #{search_txt},'%')
                    </when>
                    <when test="search=='lectureName'">
                        and lectureName like concat('%', #{search_txt},'%')
                    </when>
                    <when test="search=='teacher'">
                        and teacher like concat('%', #{search_txt},'%')
                    </when>
                    <when test="search=='subjectName'">
                        and subjectName like concat('%', #{search_txt},'%')
                    </when>
                </choose>
            </if>
        </where>
        group by l.lectureNo
        <choose>
            <when test="sort=='new'">
                order by startDate desc, lectureNo desc
            </when>
            <when test="sort=='popular'">
                 order by popular desc, lectureNo desc
            </when>
            <when test="sort=='lowPrice'">
                order by price, lectureNo desc
            </when>
            <when test="sort=='highPrice'">
                order by price desc, lectureNo desc
            </when>
            <otherwise>
                order by startDate desc, lectureNo desc
            </otherwise>
        </choose>
        <![CDATA[
            limit #{startRow}, #{pageSize}
        ]]>
    </select>


    <select id="before_open_lecture" resultType="com.chunjae.learnandrun.dto.LectureDTO">
        select  lectureNo
                , startDate
                , lectureName
        from lecture
        where startDate > NOW()
        order by startDate asc
    </select>

    <select id="new_lecture" resultType="com.chunjae.learnandrun.dto.LectureDTO">
        select  lectureNo
                , lectureName
                , description
                , thumbnail
        from lecture
        where NOW() >= startDate
        order by lectureNo desc
        limit 0,3

    </select>

    <select id="hot_lecture" resultType="com.chunjae.learnandrun.dto.LectureDTO">
        SELECT l.lectureNo, l.lectureName, l.description, l.thumbnail
        FROM lecture l
        INNER JOIN (
        SELECT lectureNo, COUNT(userNo) AS num_orders
        FROM orders
        WHERE orderDate >= DATE_SUB(NOW(), INTERVAL 1 MONTH)
        AND authority = 1
        GROUP BY lectureNo
        LIMIT 0,12
        ) AS o USING (lectureNo)
        ORDER BY num_orders DESC;
    </select>

    <select id="detailLecture" parameterType="int" resultType="com.chunjae.learnandrun.dto.LectureDTO">
        select lectureNo
             , lectureName
             , teacher
             , subjectName
             , description
             , price
             , startDate
             , thumbnail
             , lectureData
             , target
        from lecture
        where lectureNo=#{lectureNo}
    </select>

    <delete id="deleteLecture" parameterType="int">
        delete from lecture
        where lectureNo=#{lectureNo}
    </delete>

    <insert id="insertLecture" parameterType="com.chunjae.learnandrun.dto.LectureDTO">
        insert into lecture(lectureName
                          , teacher
                          , subjectName
                          , description
                          , price
                          , startDate
                          , target
                          , thumbnail
                          , lectureData
                          )
        values(#{lectureName}
             , #{teacher}
             , #{subjectName}
             , #{description}
             , #{price}
             , #{startDate}
             , #{target}
             , #{thumbnail}
             , #{lectureData}
             )
    </insert>
    <update id="updateLecture" parameterType="hashmap">
        <choose>
            <when test="ThumbnailIsEmpty==true and LectureDataIsEmpty==true">
                update lecture
                set lectureName=#{dto.lectureName}
                , teacher=#{dto.teacher}
                , subjectName=#{dto.subjectName}
                , description=#{dto.description}
                , price=#{dto.price}
                , startDate=#{dto.startDate}
                , target=#{dto.target}
                where lectureNo=#{dto.lectureNo}
            </when>
            <when test="ThumbnailIsEmpty==true">
                update lecture
                set lectureName=#{dto.lectureName}
                , teacher=#{dto.teacher}
                , subjectName=#{dto.subjectName}
                , description=#{dto.description}
                , price=#{dto.price}
                , startDate=#{dto.startDate}
                , target=#{dto.target}
                , lectureData=#{dto.lectureData}
                where lectureNo=#{dto.lectureNo}
            </when>
            <when test="LectureDataIsEmpty==true">
                update lecture
                set lectureName=#{dto.lectureName}
                , teacher=#{dto.teacher}
                , subjectName=#{dto.subjectName}
                , description=#{dto.description}
                , price=#{dto.price}
                , startDate=#{dto.startDate}
                , target=#{dto.target}
                , thumbnail=#{dto.thumbnail}
                where lectureNo=#{dto.lectureNo}
            </when>
            <otherwise>
                update lecture
                set lectureName=#{dto.lectureName}
                , teacher=#{dto.teacher}
                , subjectName=#{dto.subjectName}
                , description=#{dto.description}
                , price=#{dto.price}
                , startDate=#{dto.startDate}
                , target=#{dto.target}
                , thumbnail=#{dto.thumbnail}
                , lectureData=#{dto.lectureData}
                where lectureNo=#{dto.lectureNo}
            </otherwise>
        </choose>
    </update>
    <select id="getAuthority" parameterType="hashmap" resultType="int">
        select count(*)
        from user u inner join orders o
            on u.userNo=o.userNo
        where userId=#{userId} and lectureNo=#{lectureNo} and authority=1
    </select>
    <select id="wishList" parameterType="hashmap" resultType="int">
        select count(*)
        from wish
        where userNo=#{userNo} and lectureNo=#{lectureNo}
    </select>
    <delete id="deleteWish" parameterType="hashmap">
        delete from wish
        where userNo=#{userNo} and lectureNo=#{lectureNo}
    </delete>
    <insert id="insertWish" parameterType="hashmap">
        insert into wish(userNo
                       , lectureNo
                        )
        values(#{userNo}
             , #{lectureNo}
              )
    </insert>
</mapper>